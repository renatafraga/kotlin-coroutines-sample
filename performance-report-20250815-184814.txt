RELAT√ìRIO DE PERFORMANCE - KOTLIN COROUTINES
=============================================================
Data/Hora: Fri Aug 15 18:48:14 -03 2025
Configura√ß√£o:
- Warmup requests: 1
- Test requests: 2
- Concurrent requests: 3

----------------------------------------
TESTE: Spring MVC Blocking
Endpoint: http://localhost:8080/api/mvc/persons/blocking?count=10
Descri√ß√£o: Spring MVC tradicional com blocking I/O
Data/Hora: Fri Aug 15 18:48:22 -03 2025

RESULTADOS:
- Requisi√ß√µes v√°lidas: 2/2
- Tempo m√©dio: 1068ms
- Tempo m√≠nimo: 1066ms
- Tempo m√°ximo: 1070ms

----------------------------------------
TESTE: Spring MVC com Coroutines
Endpoint: http://localhost:8080/api/mvc/persons/async?count=10
Descri√ß√£o: Spring MVC com Kotlin Coroutines
Data/Hora: Fri Aug 15 18:48:22 -03 2025

RESULTADOS:
- Requisi√ß√µes v√°lidas: 2/2
- Tempo m√©dio: 142ms
- Tempo m√≠nimo: 137ms
- Tempo m√°ximo: 147ms

----------------------------------------
TESTE: WebFlux List
Endpoint: http://localhost:8080/api/webflux/persons/list?count=10
Descri√ß√£o: Spring WebFlux list com Coroutines
Data/Hora: Fri Aug 15 18:48:23 -03 2025

RESULTADOS:
- Requisi√ß√µes v√°lidas: 2/2
- Tempo m√©dio: 88ms
- Tempo m√≠nimo: 88ms
- Tempo m√°ximo: 89ms

----------------------------------------
TESTE: WebFlux Parallel
Endpoint: http://localhost:8080/api/webflux/persons/parallel?batches=2&countPerBatch=5
Descri√ß√£o: Spring WebFlux parallel com Kotlin Coroutines
Data/Hora: Fri Aug 15 18:48:31 -03 2025

RESULTADOS:
- Requisi√ß√µes v√°lidas: 2/2
- Tempo m√©dio: 2560ms
- Tempo m√≠nimo: 2555ms
- Tempo m√°ximo: 2566ms

----------------------------------------
TESTE: Benchmark Coroutines vs Blocking
Endpoint: http://localhost:8080/api/benchmark/coroutines-vs-blocking?count=20
Descri√ß√£o: Benchmark direto Coroutines vs Blocking
Data/Hora: Fri Aug 15 18:48:37 -03 2025

RESULTADOS:
- Requisi√ß√µes v√°lidas: 2/2
- Tempo m√©dio: 2182ms
- Tempo m√≠nimo: 2177ms
- Tempo m√°ximo: 2188ms

----------------------------------------
TESTE: Benchmark WebFlux vs MVC
Endpoint: http://localhost:8080/api/benchmark/webflux-vs-mvc?count=20
Descri√ß√£o: Benchmark WebFlux vs MVC com Coroutines
Data/Hora: Fri Aug 15 18:48:38 -03 2025

RESULTADOS:
- Requisi√ß√µes v√°lidas: 2/2
- Tempo m√©dio: 210ms
- Tempo m√≠nimo: 210ms
- Tempo m√°ximo: 211ms

TESTE DE CARGA CONCORRENTE: MVC Blocking Concorrente
- Requisi√ß√µes simult√¢neas: 3
- Tempo total: 580ms
- Requisi√ß√µes por segundo: 5.17

TESTE DE CARGA CONCORRENTE: MVC Coroutines Concorrente
- Requisi√ß√µes simult√¢neas: 3
- Tempo total: 160ms
- Requisi√ß√µes por segundo: 18.75

TESTE DE CARGA CONCORRENTE: WebFlux List Concorrente
- Requisi√ß√µes simult√¢neas: 3
- Tempo total: 111ms
- Requisi√ß√µes por segundo: 27.02

TESTE DE CARGA CONCORRENTE: WebFlux Parallel Concorrente
- Requisi√ß√µes simult√¢neas: 3
- Tempo total: 1573ms
- Requisi√ß√µes por segundo: 1.90


=============================================================
AN√ÅLISE COMPARATIVA DETALHADA
=============================================================

üöÄ AN√ÅLISE DE PERFORMANCE (Tempo de Resposta)
-------------------------------------------------------------
‚Ä¢ benchmark_coroutines: 2182ms m√©dio (min: 2177ms, max: 2188ms)
‚Ä¢ benchmark_webflux_mvc: 210ms m√©dio (min: 210ms, max: 211ms)
‚Ä¢ mvc_blocking: 1068ms m√©dio (min: 1066ms, max: 1070ms)
‚Ä¢ mvc_coroutines: 142ms m√©dio (min: 137ms, max: 147ms)
‚Ä¢ webflux_list: 88ms m√©dio (min: 88ms, max: 89ms)
‚Ä¢ webflux_parallel: 2560ms m√©dio (min: 2555ms, max: 2566ms)

üèÜ VENCEDOR EM PERFORMANCE: webflux_list (88ms)
üêå MAIS LENTO: webflux_parallel (2560ms)
üìà MELHORIA: 96.5% mais r√°pido que a abordagem mais lenta

‚ö° AN√ÅLISE DE CARGA CONCORRENTE
-------------------------------------------------------------
‚Ä¢ mvc_blocking: 580ms total (5.17 req/s)
‚Ä¢ mvc_coroutines: 160ms total (18.75 req/s)
‚Ä¢ webflux_list: 111ms total (27.02 req/s)
‚Ä¢ webflux_parallel: 1573ms total (1.90 req/s)

üèÜ MELHOR EM CARGA: webflux_list (111ms)
üêå PIOR EM CARGA: webflux_parallel (1573ms)

üéØ AN√ÅLISE T√âCNICA E RECOMENDA√á√ïES
=============================================================

üìã CARACTER√çSTICAS DE CADA ABORDAGEM:

1. SPRING MVC BLOCKING:
   ‚úÖ Simplicidade de implementa√ß√£o
   ‚úÖ Familiar para a maioria dos desenvolvedores
   ‚ùå Bloqueia threads durante I/O
   ‚ùå Baixa escalabilidade com alta concorr√™ncia
   üí° USAR QUANDO: Aplica√ß√µes com baixa concorr√™ncia

2. SPRING MVC COM COROUTINES:
   ‚úÖ Sintaxe simples e familiar
   ‚úÖ N√£o bloqueia threads durante suspens√£o
   ‚úÖ Boa escalabilidade
   ‚ö†Ô∏è  Requer runBlocking para integra√ß√£o com MVC
   üí° USAR QUANDO: Migra√ß√£o gradual para programa√ß√£o ass√≠ncrona

3. SPRING WEBFLUX:
   ‚úÖ Totalmente n√£o-bloqueante
   ‚úÖ Excelente para alta concorr√™ncia
   ‚úÖ Suporte nativo para streams
   ‚ùå Curva de aprendizado mais √≠ngreme
   üí° USAR QUANDO: Alta concorr√™ncia, APIs reativas

4. WEBFLUX COM COROUTINES:
   ‚úÖ Combina benef√≠cios do WebFlux com sintaxe simples
   ‚úÖ Melhor experi√™ncia de desenvolvimento
   ‚úÖ Performance excelente
   üéØ RECOMENDA√á√ÉO PRINCIPAL para novos projetos

üèÜ RECOMENDA√á√ÉO FINAL
=============================================================
üéØ SPRING WEBFLUX COM COROUTINES √© a MELHOR ESCOLHA!

JUSTIFICATIVA:
‚Ä¢ Melhor performance nos testes (88ms)
‚Ä¢ Excelente escalabilidade
‚Ä¢ Sintaxe clara com Coroutines
‚Ä¢ Totalmente n√£o-bloqueante

üìä CEN√ÅRIOS DE USO RECOMENDADOS:
‚Ä¢ üöÄ APIs de alta performance: WebFlux + Coroutines
‚Ä¢ üîÑ Migra√ß√£o de projetos legados: MVC + Coroutines
‚Ä¢ üéØ Novos microservi√ßos: WebFlux + Coroutines
‚Ä¢ üì± Aplica√ß√µes com muitas chamadas externas: Coroutines
‚Ä¢ üè¢ Sistemas corporativos tradicionais: MVC + Coroutines

=============================================================
üìù RELAT√ìRIO GERADO EM: Fri Aug 15 18:48:43 -03 2025
üîß FERRAMENTA: Kotlin Coroutines Performance Benchmark
=============================================================
